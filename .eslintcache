[{"D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\index.js":"1","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\App.js":"2","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\reportWebVitals.js":"3","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\header\\index.js":"4","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\myBadge.js":"5","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\menu\\index.js":"6","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\index.js":"7","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\home.js":"8","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\about.js":"9","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\experience.js":"10","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\projects.js":"11","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\skills.js":"12","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\svgs\\index.js":"13","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\education.js":"14","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\contact.js":"15","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\blog.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":952,"mtime":1611081909513,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":2214,"mtime":1609134754920,"results":"21","hashOfConfig":"18"},{"size":556,"mtime":1609651757014,"results":"22","hashOfConfig":"18"},{"size":2866,"mtime":1611082255419,"results":"23","hashOfConfig":"18"},{"size":5973,"mtime":1610222627116,"results":"24","hashOfConfig":"18"},{"size":5827,"mtime":1609529739448,"results":"25","hashOfConfig":"18"},{"size":758,"mtime":1609551556774,"results":"26","hashOfConfig":"18"},{"size":2311,"mtime":1610654124975,"results":"27","hashOfConfig":"18"},{"size":3185,"mtime":1610669747197,"results":"28","hashOfConfig":"18"},{"size":28853,"mtime":1611022549923,"results":"29","hashOfConfig":"18"},{"size":9001,"mtime":1610165372200,"results":"30","hashOfConfig":"18"},{"size":2629,"mtime":1610159874403,"results":"31","hashOfConfig":"18"},{"size":1059,"mtime":1610162603596,"results":"32","hashOfConfig":"18"},{"size":203,"mtime":1610222636141,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"loexyc",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"36"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"36"},"D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\index.js",[],["78","79"],"D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\App.js",[],"D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\reportWebVitals.js",[],"D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\header\\index.js",["80"],"\r\nimport React, { useState, useEffect } from 'react';\r\nimport './header.css';\r\nimport { IoMdClose, IoMdMenu } from \"react-icons/io\";\r\n\r\nimport { Badge } from '../myBadge';\r\nimport { Menu } from '../menu';\r\nexport const Header = props => {\r\n\r\n    \r\n    const [menuHidden, setMenuHidden] = useState(true);\r\n\r\n\r\n\r\n    function toggleMenu(e) {\r\n\r\n        if(menuHidden){\r\n            setMenuHidden(false);\r\n        } else {\r\n            setMenuHidden(true);\r\n        }\r\n      } \r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"handheld-menu-div\" style={styles.handheldMenuDiv(menuHidden)}>\r\n                <div className=\".menu-toggler-div\"  style={styles.menuTogglerDiv(menuHidden)} >\r\n                    <button className=\"menu-toggler-btn\" onClick={toggleMenu}>\r\n                        { menuHidden ? <IoMdMenu style={styles.icon}/> :  <IoMdClose style={styles.icon}/> }       \r\n                    </button>\r\n                </div>\r\n                <div className='menu-items-div' style={styles.menuItemsDiv(menuHidden)}>\r\n                    <Menu \r\n                        items={props.menuItems}\r\n                        selected={props.selectedItem}\r\n                        onItemSelect={props.navigate}/>\r\n                </div>\r\n            </div>\r\n            <div className='title-badge'>\r\n                <Badge navigate={props.navigate}/>\r\n            </div>\r\n            <div className='menu-div' >\r\n                <Menu \r\n                    items={props.menuItems}\r\n                    selected={props.selectedItem}\r\n                    onItemSelect={props.navigate}/>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nconst styles = {\r\n    icon: {\r\n      color:'#ffffff',\r\n      fontSize:'30px'\r\n    },\r\n    handheldMenuDiv: menuHidden => ({\r\n        position: menuHidden? \"relative\" : \"absolute\",\r\n        width: menuHidden ? \"60px\" : \"45vw\",\r\n        height: \"100%\",\r\n        minHeight: menuHidden ? \"100%\" : \"650px\",\r\n    }),\r\n    menuItemsDiv: menuHidden => ({\r\n        display: menuHidden? 'none' : 'flex',\r\n\r\n    }),\r\n    menuTogglerDiv: menuHidden => ({\r\n        flex: 1,\r\n        height: menuHidden ?  \"100%\"  : \"10vw\",\r\n        width: \"100%\",\r\n    }),\r\n  };\r\n  \r\n  ","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\myBadge.js",[],"D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\menu\\index.js",[],"D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\index.js",["81","82"],"\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\n\r\nimport { \r\n    FaChevronDown,\r\n    FaChevronUp\r\n} from \"react-icons/fa\";\r\n\r\n\r\nimport './pages.css';\r\nimport { Home } from './home';\r\nimport { About } from './about';\r\nimport { Experience } from './experience';\r\nimport { Projects } from './projects';\r\nimport { Skills } from './skills';\r\nimport { Education } from './education';\r\nimport { Contact } from './contact';\r\nimport { Blog } from './blog';\r\n\r\n\r\n// import bg from './bg.png';\r\n\r\n// import background from './background.jpg';\r\n\r\nexport const Pages = props => {\r\n   \r\n    const pagesBoxRef = useRef(null);\r\n    const [isColumnRatio, setIsColumnRatio] = useState(false);\r\n   \r\n\r\n    useEffect ( () => {\r\n\r\n        function getRatioState() {\r\n\r\n            if(pagesBoxRef.current){\r\n\r\n                const canvas =  pagesBoxRef.current.getBoundingClientRect()\r\n                const ratio = canvas.width / canvas.height;\r\n                \r\n                // console.log(\" width is \", canvas.width, \" height \", canvas.height, \" ratio is \", ratio);\r\n\r\n                if(ratio <  0.72){\r\n                    setIsColumnRatio(true)\r\n                } else {\r\n                    setIsColumnRatio(false)\r\n                }\r\n                \r\n            }\r\n\r\n        }\r\n          \r\n          window.addEventListener(\"resize\", getRatioState);\r\n          getRatioState();\r\n          return () => window.removeEventListener(\"resize\", getRatioState);\r\n      \r\n    }, []);\r\n\r\n\r\n    \r\n\r\n    const handleScroll = (e) =>{\r\n        \r\n        console.log(\"scrolling 11111..\");    \r\n    }\r\n\r\n    return (\r\n        <div \r\n            className=\"pages-container-div\" \r\n            ref={pagesBoxRef}\r\n            onScroll={handleScroll}>\r\n            {props.menuItems.map( (item, index) => {\r\n\r\n                return (\r\n                    <PageLoader \r\n                        name={item}\r\n                        key={item}\r\n                        isColumnRatio={isColumnRatio}\r\n                        {...props}/>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst PageLoader = props => {\r\n\r\n    \r\n    switch (props.name) {\r\n        case 'home':\r\n            return (\r\n                <PageProvider  {...props} >\r\n                    <Home {...props} />\r\n                </PageProvider>\r\n            );\r\n        case 'about':\r\n            return (\r\n                <PageProvider  {...props} >\r\n                    <About {...props} />\r\n                </PageProvider>\r\n            );\r\n        case 'experience':\r\n            return (\r\n                <PageProvider {...props} >\r\n                    <Experience  {...props} />\r\n                </PageProvider>\r\n            );\r\n        case 'projects':            \r\n            return (\r\n                <PageProvider {...props} >\r\n                    <Projects  {...props} />\r\n                </PageProvider>\r\n            );\r\n        case 'skills':            \r\n            return (\r\n                <PageProvider {...props} >\r\n                    <Skills  {...props} />\r\n                </PageProvider>\r\n            );\r\n        case 'education':            \r\n            return (\r\n                <PageProvider {...props} >\r\n                    <Education  {...props} />\r\n                </PageProvider>\r\n            );\r\n        case 'contact':            \r\n            return (\r\n                <PageProvider {...props} >\r\n                    <Contact  {...props} />\r\n                </PageProvider>\r\n            );\r\n        case 'blog':            \r\n            return (\r\n                <PageProvider {...props} >\r\n                    <Blog  {...props} />\r\n                </PageProvider>\r\n            );\r\n        // case 'resume':            \r\n        //     return (\r\n        //         <PageProvider {...props} >\r\n        //             <Resume  {...props} />\r\n        //         </PageProvider>\r\n        //     );\r\n        default:\r\n            return null;\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\nexport const PageProvider = props => {\r\n\r\n    const pageRef = useRef(null)\r\n    const [isCollapsed, setIsCollapsed] = useState(true);\r\n\r\n\r\n    const collapsePage = () => {\r\n        setIsCollapsed(!isCollapsed);\r\n             \r\n    }\r\n\r\n    useEffect( () => {\r\n        if(isCollapsed===false){\r\n            pageRef.current.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n        \r\n    }, [isCollapsed])\r\n\r\n    useEffect( () => {\r\n        \r\n        if(props.selectedItem === props.name){\r\n            pageRef.current.scrollIntoView({ behavior: 'smooth' });\r\n        }\r\n\r\n    }, [props.selectedItem])\r\n\r\n\r\n// console.log(\" PageProvider props are \", props);\r\n\r\n\r\n    return (\r\n        <div \r\n            className={`page`}\r\n            ref={pageRef}>\r\n             <span \r\n                className={`${props.name}-page-header`}\r\n                onClick={collapsePage}>\r\n                <div className=\"title-div\">\r\n                    <h1>\r\n                        {`${props.name.toUpperCase()}`}\r\n                    </h1>\r\n                </div>\r\n                <div \r\n                    className=\"collapse-icon-div\"\r\n                    style={styles.collapseIconDiv(props.isColumnRatio)}>\r\n                     {isCollapsed ? <FaChevronDown /> : <FaChevronUp /> }\r\n                </div>\r\n             </span>\r\n             <div \r\n                className={'page-body'} \r\n                style={props.name != \"home\" ? styles.pageBody(props.isColumnRatio && isCollapsed) : {paddingTop:\"0px\", paddingBottom:\"0px\"}}>\r\n                {props.children}\r\n             </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n///////////////////////////////////////////////////\r\n//\r\n//      Portfolio Pages\r\n//\r\n//////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = {\r\n    pageBody: isCollapsed => ({\r\n        display: isCollapsed ? 'none' : 'flex',\r\n    }),\r\n    collapseIconDiv: isColumnRatio => ({\r\n        display: isColumnRatio ? 'flex' : 'none',\r\n    }),\r\n  };\r\n  ","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\home.js",["83","84","85"],"\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\nimport IntroLogo from '../assets/fullstack.engineer.logo.png';\r\nimport Background from '../assets/background.jpg';\r\n\r\nimport './home.css'\r\n\r\nimport { \r\n    FaRegEnvelope,\r\n    FaLinkedin,\r\n    FaGithub,\r\n    FaEnvelope,\r\n} from \"react-icons/fa\";\r\n\r\n\r\n\r\n\r\nexport const Home = props => {\r\n\r\n    const [isColumnRatio, setIsColumnRatio] = useState(false);\r\n    const briefBioRef = useRef(null);\r\n\r\n    useEffect ( () => {\r\n\r\n        function getRatioState() {\r\n\r\n            if(briefBioRef.current){\r\n\r\n                const canvas =  briefBioRef.current.getBoundingClientRect()\r\n                const ratio = canvas.width / canvas.height;\r\n                \r\n                if(ratio >  0.7){\r\n                    setIsColumnRatio(false)\r\n                } else {\r\n                    setIsColumnRatio(true)\r\n                }\r\n                \r\n            }\r\n\r\n        }\r\n          \r\n          window.addEventListener(\"resize\", getRatioState);\r\n          getRatioState();\r\n          return () => window.removeEventListener(\"resize\", getRatioState);\r\n      \r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div \r\n            className=\"home\" \r\n            style={styles.home(isColumnRatio)}\r\n            ref = { briefBioRef }>\r\n            <div \r\n                className=\"brief-bio-div\"\r\n                style={styles.briefBioDiv(isColumnRatio)}>\r\n                <div className=\"section-one-div\" style={styles.sectionOneDiv(isColumnRatio)} >\r\n                    <BriefBioText {...props}/>\r\n                </div>\r\n                <div className=\"section-two-div\" >\r\n                    <BriefBioLogo {...props} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst BriefBioText = props => {\r\n\r\n  \r\n\r\n\r\n    return (\r\n         <>\r\n            <div className=\"text-div\">\r\n                <p >The broader the perspective, </p>\r\n                <p style={{alignSelf:\"center\"}}>the wider the creativity</p>\r\n                <p >Improvise, Adapt, and Overcome</p>\r\n            </div>\r\n            <div className=\"call-to-action-div\">\r\n                <button \r\n                    className=\"contact-me-btn\"\r\n                    onClick={(e) => {\r\n                        e.preventDefault();\r\n                        window.location.href='mailto:techyoob@gmail.com';\r\n                        }}\r\n                    >Contact Me</button>\r\n            </div>\r\n            <div className=\"social-media-div\" >\r\n                <div style={{ display:'flex', justifyContent:'space-around', alignItems:'flex-start', width:'50%', fontSize:'29px'}}>\r\n                    <span\r\n                        className=\"social-btn\" \r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            window.location.href='https://www.linkedin.com/in/ayoubsoud/';\r\n                            }}>\r\n                        <FaLinkedin />                    \r\n                    </span>\r\n                    <span\r\n                        className=\"social-btn\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            window.location.href='https://github.com/techyoob';\r\n                            }}>\r\n                        <FaGithub />\r\n                    </span>\r\n                    <span\r\n                        className=\"social-btn\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            window.location.href='mailto:techyoob@gmail.com';\r\n                            }}>\r\n                        <FaEnvelope />\r\n                    </span>                    \r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport const BriefBioLogo = props => {\r\n\r\n    const introLogoRef = useRef(null);\r\n    const [viewBox, setViewBox] = useState({x0:-50, y0:-50, width:500, height:500});\r\n\r\n    useEffect ( () => {\r\n\r\n        function handleViewBoxResize() {\r\n\r\n            if(introLogoRef.current){\r\n\r\n                const canvas =  introLogoRef.current.getBoundingClientRect()\r\n                \r\n                console.log(\" wwidth and height are \", canvas.width, \"  and \", canvas.height);\r\n                \r\n                const coordScale = Math.min(canvas.width, canvas.height)\r\n                \r\n                setViewBox({...viewBox,\r\n                    width:coordScale,\r\n                    height:coordScale,\r\n                    x0:-canvas.width/2,\r\n                    y0:-canvas.height/2\r\n                })\r\n\r\n\r\n            }\r\n\r\n        }\r\n          \r\n          window.addEventListener(\"resize\", handleViewBoxResize);\r\n\r\n          handleViewBoxResize();\r\n\r\n          return () => window.removeEventListener(\"resize\", handleViewBoxResize);\r\n      \r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"intro-logo-div\"  style={styles.briefBioLogoDiv}>\r\n            <img\r\n                src={IntroLogo} \r\n                alt=\"fullstack intro graph, ayoub soud\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = {\r\n \r\n    home: isColumnRatio =>({\r\n        display: 'flex',\r\n        height:'100vh',\r\n        width:'100%',\r\n        // backgroundImage:`url(${Background})`,\r\n    }),\r\n    briefBioDiv: isColumnRatio =>({\r\n        display: 'flex',\r\n        flexDirection: isColumnRatio ? 'column-reverse' : 'row',\r\n        height: isColumnRatio? '60%':'50%',\r\n    }),\r\n    sectionOneDiv: isColumnRatio =>({\r\n        display: 'flex',\r\n        flex: isColumnRatio ? 2 : 3,\r\n    }),\r\n    p: smallScreen =>({\r\n        fontSize: smallScreen? '0.9rem' : '0.9vw',\r\n        alignSelf:'center',\r\n        margin:0,\r\n    }),\r\n    briefBioLogoDiv:{\r\n        // backgroundImage:`url(${IntroLogo})`,\r\n    },\r\n    \r\n  };\r\n  ","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\about.js",["86","87","88"],"\r\n\r\n\r\nimport React, { useRef, useEffect } from 'react';\r\nimport './about.css';\r\n\r\nimport about from '../data/about.json'\r\n\r\n\r\n\r\nexport const About = props => {\r\n\r\n\r\n    return (\r\n        <div className=\"about\" >\r\n            <div className={\"about-text-div\"} >\r\n                <p>\r\n                   {about.p1} \r\n                </p>\r\n                <p>\r\n                    {about.p2}                    \r\n                </p>\r\n                <p>\r\n                    {about.p3}                    \r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = {\r\n    aboutTextDiv: smallScreen =>({\r\n        width: smallScreen? '94%' : '65%',\r\n        fontSize: smallScreen? '1.1rem' : '1.68rem',\r\n    }),\r\n  };\r\n  ","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\experience.js",["89","90"],"import React, { useRef, useEffect } from 'react';\r\nimport './experience.css';\r\n\r\nimport experience from '../data/experience.json'\r\n\r\n\r\nimport { \r\n    FaLink,\r\n    FaMapMarkerAlt,\r\n} from \"react-icons/fa\";\r\n\r\n\r\nexport const Experience = props => {\r\n\r\n    return (\r\n        <div className=\"experience\" style={styles.experience}>\r\n            {experience.map( (job, index) => {\r\n                return (\r\n                    <Job \r\n                        {...props}\r\n                        {...job}\r\n                        key={index}/>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport const Job = props => {\r\n\r\n\r\n    return(\r\n        <div className={\"job-div\"}  >\r\n            <div className={\"job-header-div\"} >\r\n                <div className={\"job-tittle-div\"} >\r\n                    {props.position}\r\n                </div>\r\n                <div className={\"job-name-div\"} >\r\n                    {'link' in props?\r\n                        <a href={props.link} >\r\n                            <FaLink   />   \r\n                        </a>\r\n                    : null }\r\n                    {props.name}\r\n                </div>\r\n            </div>\r\n            <div className={\"job-body-div\"} >\r\n                <h4> Roles & Accomplishments </h4>\r\n                <ul>\r\n                   {props.roles.map( (role, index) => {\r\n                        return <li key={index}>{role}</li>\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className={\"job-footer-div\"} >\r\n                <span className=\"footer-detail-span\"> \r\n                    {props.start + \" - \" + props.end +  \" | \"}\r\n                        <FaMapMarkerAlt />\r\n                    {props.location}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst styles = {\r\n    experience:{\r\n        height:'100%',\r\n    },\r\n    jobNameDiv: smallScreen =>({\r\n        display: 'flex',\r\n        flex: smallScreen? 4 :  2,\r\n        justifyContent:'center',\r\n        alignItems:'center',\r\n        fontSize: smallScreen? '0.8rem' : '1rem',\r\n    }), \r\n    jobBodyDiv: smallScreen =>({\r\n        fontSize: smallScreen? '0.8rem' : '1.1rem',\r\n    }),\r\n    jobFooterDiv: smallScreen =>({\r\n        fontSize: smallScreen? '0.8rem' : '1.1rem',\r\n    }),\r\n    \r\n  };\r\n  ","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\projects.js",["91","92","93","94"],"\r\n\r\nimport React, { useRef, useEffect } from 'react';\r\n\r\nimport './projects.css'\r\n\r\nimport projects from '../data/projects.json';\r\nimport { IconSVG } from '../svgs'\r\n// import { ReactComponent  as Mongodb } from '../svgs/mongodb.svg'; \r\n\r\n\r\nimport { \r\n    FaReact,\r\n    FaLinkedin,\r\n    FaGithub,\r\n    FaLink,\r\n} from \"react-icons/fa\";\r\n\r\n\r\nexport const Projects = props => {\r\n\r\n    return (\r\n        \r\n        <section className=\"projects\" >\r\n            {projects.map((item, index)=>{\r\n                return (\r\n                    <Project \r\n                        {...props}\r\n                        item={item}\r\n                        key={index}/>\r\n                );\r\n            })}\r\n        </section>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\nconst Project = props => {\r\n\r\n    return (\r\n        <div className={\"project-div\"}>\r\n            <div className={\"project-body-div\"}>\r\n                <div className={\"project-description\"}>\r\n                    <div className=\"project-title-div\">\r\n                        <h4>{props.item.name}</h4>\r\n                    </div>\r\n                    <div className=\"project-details-div\">\r\n                        {props.item.description}\r\n                    </div>\r\n                </div>\r\n                <div className={\"project-technologies\"}>\r\n                    {props.item.technologies.map( tech => {\r\n                        return <IconSVG name={tech} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" />;\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className={\"project-footer-div\"}>\r\n                {Object.keys(props.item.links).map( (name, index) => {\r\n\r\n                    const link = props.item.links[name]\r\n                    \r\n                    return (\r\n                        <a \r\n                            className={\"link-button-div\"}\r\n                            key={index} \r\n                            href={link}>\r\n                            <div className={\"link-button-icon\"} >\r\n                                <LinkLoader name={name} link={link}/>\r\n                            </div>\r\n                            <div className={\"link-button-text\"}>\r\n                                {name}\r\n                            </div>\r\n                            \r\n                        </a>);\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const TechLoader = (props) => {\r\n\r\n    switch(props.icon){\r\n        case \"react\":\r\n            return <FaReact color={\"#61DBFB\"} size={60}/>;\r\n        // case \"mongodb\":\r\n        //      return <Mongodb  className={\"mongodb-svg\"}/>\r\n        default:\r\n            return null;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const LinkLoader = (props) => {\r\n    \r\n\r\n    switch(props.name){\r\n        case \"GitHub\":\r\n            return (\r\n                <FaGithub />\r\n            );\r\n        case \"Demo\":\r\n             return (\r\n                <FaLink />\r\n            );\r\n        default:\r\n            return null;\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst styles = {\r\n    experience:{\r\n        height:'100%',\r\n    },\r\n    jobHeaderDiv: smallScreen =>({\r\n        fontSize: smallScreen? '1rem' : '1.6rem',\r\n        fontWeight:600,\r\n    }),\r\n    \r\n  };\r\n  ","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\skills.js",["95","96","97","98","99","100","101","102","103"],"\r\n\r\n\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\n\r\n// import { scaleLinear } from 'd3-scale'\r\n// import { max } from 'd3-array'\r\n// import { select } from 'd3-selection'\r\n// import * as d3 from \"d3\";\r\n\r\nimport './skills.css'\r\nimport techsList from '../data/technologies.json';\r\nimport langsList from '../data/languages.json';\r\nimport othersList from '../data/others.json';\r\nimport { IconSVG } from '../svgs'\r\n\r\n\r\nimport skills from '../data/skills.json'\r\nimport graph from '../data/graphs.json'\r\n// import { IconSVG } from '../svgs/index.js'\r\n\r\n\r\nimport testData from '../data/testData.json'\r\n\r\n// import { ReactComponent  as FullStack } from '../svgs/fullstack.svg';\r\n\r\n\r\nimport { \r\n    FaReact,\r\n    FaLinkedin,\r\n    FaGithub,\r\n    FaLink,\r\n} from \"react-icons/fa\" ;\r\n\r\n\r\n// import { forceLink } from 'd3';\r\n\r\nexport const Skills = props => {\r\n\r\n// console.log(\" props are are\", props );\r\n    return (\r\n        <div className=\"skills-div\" style={styles.skillsDiv(props.isColumnRatio)}>\r\n            <div className=\"techs-div\">\r\n                <div className=\"techs-title-div\">\r\n                    <h1>TECHNOLOGIES</h1>\r\n                </div>\r\n                <div className=\"techs-body-div\">\r\n\t\t            <Techs />\r\n                </div>\r\n            </div>\r\n            <div className=\"langs-div\">\r\n                <div className=\"langs-title-div\">\r\n                    <h1>LANGUAGES</h1>\r\n                </div>\r\n                <span className=\"langs-body-div\">\r\n                    <CircleList data={langsList} />\r\n                </span>\r\n            </div>\r\n            <div className=\"others-div\">\r\n                <div className=\"others-title-div\">\r\n                    <h1>OTHER</h1>\r\n                </div>\r\n                <div className=\"others-body-div\">\r\n                    <CircleList data={othersList} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const Techs = props => {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {techsList.map((tech)=>{\r\n                    return (\r\n                        <React.Fragment key={tech.name}>\r\n                            <div className=\"tech-div\">\r\n                                <div className=\"title-div\">\r\n                                    <svg className=\"tech-logo\">\r\n                                        <IconSVG name={tech.name} x=\"0\" y=\"0\" width=\"90%\" height=\"90%\" /> \r\n                                    </svg>\r\n                                    <h2>{tech.name}</h2>\r\n                                </div>\r\n                                <div className=\"skill-div\">\r\n                                    {tech.children.map((skill)=>{\r\n                                        return(\r\n                                            <React.Fragment key={skill.name}>\r\n                                                <div className=\"skill-logo-div\">\r\n                                                    <div className=\"skill-logo\">\r\n                                                        <IconSVG name={skill.name} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" /> \r\n                                                    </div>\r\n                                                    <span className=\"skill-name\">\r\n                                                        <p> {skill.name} </p>\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div style={styles.spacingRightDiv}>\r\n                                                    \r\n                                                </div>\r\n                                            </React.Fragment>\r\n                                        )\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"spacing-div\">\r\n                            </div>\r\n                        </React.Fragment>\r\n                    )\r\n                })}\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n\r\nexport const CircleList = props => {\r\n    \r\n\r\n    return (\r\n    <>\r\n        {props.data.map((lang)=>{\r\n            return (\r\n                <React.Fragment key={lang.name}>\r\n                    <div className=\"circle-div\">\r\n                        <div className=\"lang-div\">\r\n                            <IconSVG name={lang.name} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" /> \r\n                        </div>\r\n                        <span className=\"lang-name\">{lang.name}</span>\r\n                    </div>\r\n                    <div style={styles.spacingRightDiv}>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        })}\r\n    </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const Skills = props => {\r\n\r\n//     console.log(\" props are \", props );\r\n//         return (\r\n//             <div className=\"skills-div\" style={styles.skillsDiv}>\r\n//                 <div className=\"techs-div\">\r\n//                     <div className=\"techs-title-div\">\r\n//                         <h2>TECHNOLOGIES</h2>\r\n//                     </div>\r\n//                     <div className=\"techs-body-div\">\r\n//                         <Techs data={skills.technologies} />\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className=\"lang-div\">\r\n//                     <div className=\"title-div\">\r\n//                         <h2>LANGUAGES</h2>\r\n//                     </div>\r\n//                     <div className=\"body-div1\">\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className=\"others-div\">\r\n//                     <div className=\"title-div\">\r\n//                         <h2>OTHER</h2>\r\n//                     </div>\r\n//                     <div className=\"\">\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     };\r\n\r\n\r\n// export const Techs = props => {\r\n// // props.data.nodes\r\n// // props.data.links\r\n\r\n//     const [data, setData] = useState([150, 150, 150, 150, 150]);\r\n\r\n//     const techsContainerRef = useRef();\r\n//     const divContainerRef = useRef();\r\n\r\n//     const nodes = props.data.nodes;\r\n//     const edges = props.data.links;\r\n\r\n//     // var nodes = [{\"id\":'/f1'},{\"id\":'f2'},{\"id\":'f3'},{\"id\":'f4'}, {\"id\":'f5'}, {\"id\":'f6'}, {\"id\":'f7'}]\r\n//     // var links = [{source:'f1',target:'f2'}, {source:'f1',target:'f3'}, {source:'f3',target:'f4'}, {source:'f3',target:'f6'}, {source:'f4',target:'f6'}, {source:'f4',target:'f7'}]\r\n\r\n//     const handleGraphDraw = () => {\r\n\r\n//         if(divContainerRef.current){\r\n\r\n//             // get parent div container dimension\r\n//             const canvasContainer =  divContainerRef.current.getBoundingClientRect();\r\n\r\n//             // console.log(\" width2 is \", canvasContainer.width, \" height2 \", canvasContainer.height);\r\n//             const width = canvasContainer.width,\r\n//                 height = canvasContainer.height;\r\n\r\n//             //Initializing chart\r\n//             const svgContainer = d3.select(techsContainerRef.current)\r\n//                 .attr('width', width)\r\n//                 .attr('height', height);\r\n\r\n//             //define and stop the simulation\r\n//             const simulation = d3.forceSimulation()\r\n//                 .force(\"center\", d3.forceCenter(width/2, height/2))                  \r\n//                 .force(\"charge\", d3.forceManyBody());\r\n            \r\n//             // const nodeElements = svgContainer.append('g')\r\n//             //     .selectAll(\"svg\")\r\n//             //     .data(nodes)\r\n//             //     .join(\"svg\")\r\n//             //     .attr(\"width\", 100)\r\n//             //     .attr(\"height\", 100)\r\n//             //     .append('circle')\r\n//             //     .attr('r', '50%')\r\n//             //     .attr(\"cx\", \"50%\")\r\n//             //     .attr(\"cy\", \"50%\")\r\n//             //     .attr('fill', 'yellow')\r\n\r\n\r\n//             function getNodeColor(node) {\r\n//                 return node.level === 1 ? 'red' : 'yellow'\r\n//                 }\r\n\r\n//             const nodeElements = svgContainer\r\n//                 .selectAll('svg')\r\n//                 .data(nodes)\r\n//                 .join(\"svg\")\r\n//                 .attr(\"width\", 100)\r\n//                 .attr(\"height\", 100)\r\n\r\n//             nodeElements\r\n//                 .append(\"circle\")\r\n//                 .join(\"circle\")\r\n//                 .attr('r', '50%')\r\n//                 .attr(\"cx\", \"50%\")\r\n//                 .attr(\"cy\", \"50%\")\r\n//                 .attr('fill', 'yellow')\r\n\r\n\r\n//               simulation.nodes(nodes).on('tick', () => {\r\n//                 nodeElements\r\n//                     .attr(\"x\", node => node.x)\r\n//                     .attr(\"y\", node => node.y)\r\n//                 })\r\n//         }\r\n//     }\r\n    \r\n//     useEffect(() => {\r\n\r\n//         window.addEventListener(\"resize\", handleGraphDraw);\r\n//         handleGraphDraw();\r\n//         return () => window.removeEventListener(\"resize\", handleGraphDraw);\r\n \r\n//     }, []);\r\n\r\n\r\n\r\n//     return (\r\n      \r\n//       <div className='div-container'\r\n//             ref={divContainerRef}\r\n//             style={{width:\"100%\", height:\"100%\"}}>\r\n//         <svg\r\n//             className=\"techs-container\"\r\n//             ref={techsContainerRef}>\r\n    \r\n//         </svg>\r\n//       </div>\r\n//     );\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//  export const Techs = props => {\r\n\r\n//     const [data, setData] = useState([{x:0, y:0}]);\r\n//     const techsContainerRef = useRef();\r\n//     const divContainerRef = useRef();\r\n\r\n\r\n//     const handleGraphDraw = () => {\r\n\r\n//         if(divContainerRef.current){\r\n\r\n//             // get parent div container dimension\r\n//             const canvasContainer =  divContainerRef.current.getBoundingClientRect();\r\n//             // console.log(\" width2 is \", canvasContainer.width, \" height2 \", canvasContainer.height);\r\n//             const width = canvasContainer.width,\r\n//                 height = canvasContainer.height;\r\n\r\n\r\n//             //Initializing chart\r\n//             const svgContainer = d3.select(techsContainerRef.current)\r\n//                 .attr('width', width)\r\n//                 .attr('height', height);\r\n\r\n//             // //Creating tooltip\r\n//             // const tooltip = d3.select('.div-container')\r\n//             //     .append('div')\r\n//             //     .attr('class', 'tooltip')\r\n//             //     .html('Tooltip');\r\n\r\n//             //Initializing force simulation\r\n//             const simulation = d3.forceSimulation()\r\n//                 .force('link', d3.forceLink())\r\n//                 .force('charge', d3.forceManyBody())\r\n//                 .force('collide', d3.forceCollide())\r\n//                 .force('center', d3.forceCenter(width / 2, height / 2))\r\n//                 .force(\"y\", d3.forceY(0))\r\n//                 .force(\"x\", d3.forceX(0));\r\n\r\n\r\n\r\n//             //Drag functions\r\n//             const dragStart = (event, d) => {\r\n//                 console.log(\" evnt \", event);\r\n//                 if (!event.active) simulation.alphaTarget(0.3).restart();\r\n//                 d.fx = d.x;\r\n//                 d.fy = d.y;\r\n//             };\r\n            \r\n//             const drag = (event, d) => {\r\n//                 d.fx = event.x;\r\n//                 d.fy = event.y;\r\n//             };\r\n            \r\n//             const dragEnd = (event, d) => {\r\n//                 if (!event.active) simulation.alphaTarget(0);\r\n//                 d.fx = null;\r\n//                 d.fy = null;\r\n//             }\r\n            \r\n//             //Creating links\r\n//             const link = svgContainer.append('g')\r\n//                 .attr('class', 'links')\r\n//                 .selectAll('line')\r\n//                 .data(testData.links).enter()\r\n//                 .append('line');\r\n            \r\n//             //Creating nodes\r\n//             const node = d3.select('.div-container')\r\n//                 .selectAll('div')\r\n//                 .data(testData.nodes).enter()\r\n//                 .append('div')\r\n//                 .attr('class', d => {return 'flag flag-' + d.code;})\r\n//                 .call(d3.drag()\r\n//                 .on('start', dragStart)\r\n//                 .on('drag', drag)\r\n//                 .on('end', dragEnd)\r\n//                 ).on('mouseover',(event, d) => {\r\n//                     // tooltip.html(d.country)\r\n//                     //     .style('left', event.pageX + 5 +'px')\r\n//                     //     .style('top', event.pageY + 5 + 'px')\r\n//                     //     .style('opacity', .9);\r\n//                 }).on('mouseout', () => {\r\n//                     // tooltip.style('opacity', 0)\r\n//                     //     .style('left', '0px')\r\n//                     //     .style('top', '0px');\r\n//                 });\r\n            \r\n//             //Setting location when ticked\r\n//             const ticked = () => {\r\n//                 link\r\n//                 .attr(\"x1\", d => { return d.source.x; })\r\n//                 .attr(\"y1\", d => { return d.source.y; })\r\n//                 .attr(\"x2\", d => { return d.target.x; })\r\n//                 .attr(\"y2\", d => { return d.target.y; });\r\n\r\n//             node\r\n//                 .attr(\"style\", d => { \r\n//                     return 'left: ' + d.x + 'px; top: ' + (d.y + 72) + 'px'; \r\n//                 });\r\n//             };\r\n            \r\n//             //Starting simulation\r\n//             simulation.nodes(testData.nodes)\r\n//                 .on('tick', ticked);\r\n            \r\n//             simulation.force('link')\r\n//                 .links(testData.links);\r\n    \r\n//                 console.log(\" testData is \", testData);\r\n//         }\r\n//     }\r\n    \r\n//     useEffect(() => {\r\n\r\n//         window.addEventListener(\"resize\", handleGraphDraw);\r\n//         handleGraphDraw();\r\n//         return () => window.removeEventListener(\"resize\", handleGraphDraw);\r\n \r\n//     }, []);\r\n\r\n\r\n\r\n//     return (\r\n      \r\n//       <div className='div-container'\r\n//             ref={divContainerRef}\r\n//             style={{width:\"100%\", height:\"100%\"}}>\r\n//         <svg\r\n//             className=\"techs-container\"\r\n//             ref={techsContainerRef}>\r\n     \r\n//         </svg>\r\n//       </div>\r\n//     );\r\n// };\r\n\r\n\r\n// export const Techs = props => {\r\n\r\n//     const [data, setData] = useState([{x:0, y:0}]);\r\n//     const techsContainerRef = useRef();\r\n    \r\n//     useEffect(() => {\r\n//       const container = select(techsContainerRef.current);\r\n//       container\r\n//         .selectAll(\"svg\")\r\n//         .data(data)\r\n//         .join(\"svg\")\r\n//         .attr(\"x\", value => value.x)\r\n//         .attr(\"y\", value => value.y)\r\n//         .attr(\"width\", \"10%\")\r\n//         .attr(\"height\", \"10%\")\r\n//         .append(\"circle\")\r\n//         .attr(\"r\", \"50%\")\r\n//         .attr(\"cx\", \"50%\")\r\n//         .attr(\"cy\", \"50%\");\r\n//     }, [data]);\r\n\r\n\r\n\r\n//     return (\r\n//       <React.Fragment>\r\n//         <svg\r\n//             className=\"techs-container\"\r\n//             ref={techsContainerRef}\r\n//             width=\"100%\"\r\n//             height=\"100%\">\r\n//             <defs>\r\n//                 <pattern id=\"full-stack\"  x = \"0%\" y = \"0%\"width=\"1\" height=\"1\" >\r\n//                     <IconSVG name=\"fullstack\" x=\"0\" y=\"0\" width=\"10%\" height=\"10%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"front-end\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"frontend\" x=\"13\" y=\"10\" width=\"8%\" height=\"10%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"back-end\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"backend\" x=\"10\" y=\"12\" width=\"10%\" height=\"9%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"database\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"database\" x=\"10\" y=\"12\" width=\"10%\" height=\"9%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"iot\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"iot\" x=\"10\" y=\"12\" width=\"10%\" height=\"10%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"web\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"web\" x=\"11\" y=\"12\" width=\"6%\" height=\"6%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"mobile\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"mobile\" x=\"10\" y=\"9\" width=\"7%\" height=\"7%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"react\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"react\" x=\"6\" y=\"8\" width=\"8%\" height=\"9%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"html\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"html\" x=\"0\" y=\"3\" width=\"12%\" height=\"12%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"css\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"css\" x=\"0\" y=\"3\" width=\"12%\" height=\"12%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"react-native\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"react\" x=\"6\" y=\"8\" width=\"8%\" height=\"9%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"android\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"android\" x=\"3\" y=\"5\" width=\"10%\" height=\"8%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"ios\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"ios\" x=\"0\" y=\"0\" width=\"13%\" height=\"13%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"nodejs\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"nodejs\" x=\"0\" y=\"0\" width=\"13%\" height=\"13%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\".net\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\".net\" x=\"9\" y=\"9\" width=\"7%\" height=\"7%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"mongodb\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"mongodb\" x=\"0\" y=\"9\" width=\"15%\" height=\"15%\" /> \r\n//                 </pattern>\r\n//                 <pattern id=\"mysql\" width=\"100%\" height=\"100%\"  >\r\n//                     <IconSVG name=\"mysql\" x=\"2\" y=\"0\" width=\"12%\" height=\"12%\" /> \r\n//                 </pattern>\r\n//             </defs>\r\n\r\n//         </svg>\r\n//       </React.Fragment>\r\n//     );\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n// export const Techs = props => {\r\n\r\n//     const techsBodyRef = useRef(null);\r\n//     const [viewBox, setViewBox] = useState({x0:0, y0:0, width:1, height:1}, []);\r\n//     const [direction, setDirection] = useState(\"\");\r\n\r\n    \r\n\r\n//     const [res, setRes] = useState({w:0, h:0})\r\n\r\n//     useEffect ( () => {\r\n\r\n//         function handleViewBoxResize() {\r\n\r\n//             if(techsBodyRef.current){\r\n\r\n//                 const canvas =  techsBodyRef.current.getBoundingClientRect()\r\n//                 setViewBox({...viewBox,\r\n//                     width:canvas.width,\r\n//                     height:canvas.height\r\n//                 })\r\n\r\n//                 const ratio = canvas.width / canvas.height;\r\n\r\n//                 if(ratio >  1){\r\n//                     setDirection(\"row\")\r\n//                 } else {\r\n//                     setDirection(\"column\")\r\n//                 }\r\n                \r\n//             }\r\n\r\n//         }\r\n          \r\n//           window.addEventListener(\"resize\", handleViewBoxResize);\r\n\r\n//           handleViewBoxResize();\r\n\r\n//           return () => window.removeEventListener(\"resize\", handleViewBoxResize);\r\n      \r\n//     }, []);\r\n\r\n\r\n\r\n//     return (\r\n//            <svg \r\n//             className=\"techs-container\" \r\n//             width=\"100%\"\r\n//             height=\"100%\"\r\n//             ref = { techsBodyRef }\r\n//             viewBox={`${viewBox.x0} ${viewBox.y0} ${viewBox.width} 700`}\r\n//             xmlns=\"http://www.w3.org/2000/svg\">\r\n//                 <defs>\r\n//                     <pattern id=\"full-stack\"  x = \"0%\" y = \"0%\" width=\"1\" height=\"1\"  >\r\n//                         <IconSVG name=\"fullstack\" x=\"0\" y=\"0\" width=\"10%\" height=\"10%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"front-end\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"frontend\" x=\"13\" y=\"10\" width=\"8%\" height=\"10%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"back-end\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"backend\" x=\"10\" y=\"12\" width=\"10%\" height=\"9%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"database\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"database\" x=\"10\" y=\"12\" width=\"10%\" height=\"9%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"iot\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"iot\" x=\"10\" y=\"12\" width=\"10%\" height=\"10%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"web\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"web\" x=\"11\" y=\"12\" width=\"6%\" height=\"6%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"mobile\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"mobile\" x=\"10\" y=\"9\" width=\"7%\" height=\"7%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"react\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"react\" x=\"6\" y=\"8\" width=\"8%\" height=\"9%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"html\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"html\" x=\"0\" y=\"3\" width=\"12%\" height=\"12%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"css\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"css\" x=\"0\" y=\"3\" width=\"12%\" height=\"12%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"react-native\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"react\" x=\"6\" y=\"8\" width=\"8%\" height=\"9%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"android\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"android\" x=\"3\" y=\"5\" width=\"10%\" height=\"8%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"ios\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"ios\" x=\"0\" y=\"0\" width=\"13%\" height=\"13%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"nodejs\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"nodejs\" x=\"0\" y=\"0\" width=\"13%\" height=\"13%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\".net\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\".net\" x=\"9\" y=\"9\" width=\"7%\" height=\"7%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"mongodb\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"mongodb\" x=\"0\" y=\"9\" width=\"15%\" height=\"15%\" /> \r\n//                     </pattern>\r\n//                     <pattern id=\"mysql\" width=\"100%\" height=\"100%\"  >\r\n//                         <IconSVG name=\"mysql\" x=\"2\" y=\"0\" width=\"12%\" height=\"12%\" /> \r\n//                     </pattern>\r\n//                 </defs>\r\n//                 <TagContainer  \r\n//                     data={graph.skills.technologies}\r\n//                     direction={direction}\r\n//                     step={{x:0, y:0}}\r\n//                     container={viewBox}/>\r\n//             </svg>\r\n     \r\n//     );\r\n// };\r\n\r\n\r\nconst TagContainer = props => {\r\n \r\n    console.log(\" props \", props.direction);\r\n\r\n\r\n    const getCoords = ({index, size}) =>{\r\n\r\n        if(props.direction === \"column\"){\r\n\r\n            \r\n            return {\r\n                x:props.step.x,\r\n                y:props.step.y,\r\n                w:props.container.width / props.data.length,\r\n                h:size * props.container.height,\r\n                step:{\r\n                    x:props.step.x,\r\n                    y:props.step.y + size * props.container.height\r\n                }\r\n            }\r\n        } else if(props.direction === \"row\") {\r\n\r\n            return {\r\n                x:0,\r\n                y:0,\r\n                w:size * props.container.width + (index * size * props.container.height),\r\n                h:props.container.height / props.data.length,\r\n                step:{\r\n                    x:props.step.x + size * props.container.width,\r\n                    y:props.step.y + (index * size * props.container.width)\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\nconsole.log(\" am nothing direction \");\r\n\r\n            return {\r\n                x:0,\r\n                y:0,\r\n                w:1,\r\n                h:1,\r\n                step:{\r\n                    x:0,\r\n                    y:0\r\n                }\r\n            }\r\n\r\n        } \r\n    }\r\n \r\n\r\n    return props.data.map((item, index)=>{\r\n        \r\n        const tagViewBox = getCoords({index, size:item.size});\r\n\r\n        console.log(\" item \", item.name, \" is at \", tagViewBox.step.x, \" and \",  tagViewBox.step.y);\r\n\r\n        return (\r\n            <g key={index}>\r\n                <TagSVG item={item} tagViewBox={tagViewBox} />\r\n                {item.children.length > 0 \r\n                ? \r\n                <TagContainer \r\n                    data={item.children}\r\n                    step={tagViewBox.step} \r\n                    direction={props.direction}\r\n                    container={props.container}/> \r\n                : null}                \r\n            </g>\r\n        );\r\n \r\n    });\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst TagSVG = (props) => {\r\n\r\n    \r\n    \r\n    const tagSize = Math.min(props.tagViewBox.w, props.tagViewBox.h);\r\n\r\n    switch(props.item.tagShape){\r\n        case \"circle\":\r\n            return (\r\n                <svg >\r\n                    <circle />\r\n                </svg>\r\n                );\r\n\r\n        case \"square\":\r\n            \r\n            return (\r\n                <svg\r\n                    width={`${props.tagViewBox.w}`}\r\n                    height={`${props.tagViewBox.h}`}\r\n                    viewBox={`-${props.tagViewBox.w/2} -${props.tagViewBox.h/2} ${props.tagViewBox.w} ${props.tagViewBox.h}`}\r\n                    stroke=\"black\">\r\n                    <rect\r\n                        x={`-${tagSize/2}`}\r\n                        y={`-${tagSize/2}`}\r\n                        width={`${tagSize}`}\r\n                        height={`${tagSize}`}\r\n                        fill=\"red\" />\r\n                </svg>\r\n                );\r\n        default:\r\n            return null; \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const Languages = props => {\r\n\r\n    return (\r\n        <div className=\"skills-div\" style={styles.skills}>\r\n            <div>\r\n            </div>\r\n            <div>\r\n            </div>\r\n            <div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport const Other = props => {\r\n\r\n    return (\r\n        <div className=\"skills-div\" style={styles.skills}>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n            </div>\r\n            <div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n/////////////////////////////////////////////////////////////\r\n//\r\n//                          Hook\r\n//\r\n////////////////////////////////////////////////////////////////\r\n\r\n\r\nfunction useDetectRatio() {\r\n    // Initialize state with undefined width/height so server and client renders match\r\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n    const [windowSize, setWindowSize] = useState({\r\n      width: undefined,\r\n      height: undefined,\r\n    });\r\n  \r\n    useEffect(() => {\r\n      // Handler to call on window resize\r\n      function handleResize() {\r\n        // Set window width/height to state\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        });\r\n      }\r\n      \r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n      \r\n      // Call handler right away so state gets updated with initial window size\r\n      handleResize();\r\n      \r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n  \r\n    return windowSize;\r\n  }\r\n\r\n\r\n\r\nconst styles = {\r\n\r\n    page: {\r\n        display: 'flex',\r\n        flex:1,\r\n        flexDirection: 'column',        \r\n      },\r\n      spacingRightDiv:{\r\n          width:\"20px\"     \r\n      },\r\n      skillsDiv: isColumnRatio => ({\r\n          width: isColumnRatio ? '90%' : '80%',\r\n      }),\r\n\r\n  };\r\n  ","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\svgs\\index.js",["104","105","106","107","108","109","110"],"\r\n\r\nimport React, { useRef, useEffect } from 'react';\r\n\r\n\r\n\r\nimport { \r\n    FaCogs,\r\n    FaLinkedin,\r\n    FaGithub,\r\n    FaLink,\r\n    FaRegImages\r\n} from \"react-icons/fa\" ;\r\n\r\n\r\nimport { ReactComponent  as FullStack } from './fullstack.svg';\r\nimport { ReactComponent  as BackEnd } from './backend.svg'\r\nimport { ReactComponent  as FrontEnd } from './frontend.svg';\r\nimport { ReactComponent  as Database } from './database.svg';\r\nimport { ReactComponent  as D3JS } from './d3js.svg';\r\nimport { ReactComponent  as Iot } from './iot.svg';\r\nimport { ReactComponent  as Arduino } from './arduino.svg';\r\nimport { ReactComponent  as Ti } from './ti.svg';\r\nimport { ReactComponent  as DotNet } from './.net.svg';\r\nimport { ReactComponent  as NodeJS } from './nodejs.svg';\r\n// import { ReactComponent  as ExpressJS } from './expressjs.svg';\r\nimport { ReactComponent  as Mobile } from './mobile.svg';\r\nimport { ReactComponent  as Web } from './web.svg';\r\nimport { ReactComponent  as ReactSVG } from './react.svg';\r\nimport { ReactComponent  as Android } from './android.svg'; \r\nimport { ReactComponent  as IoS } from './ios.svg';\r\n// import { ReactComponent  as MicroPython } from './micropython.svg';\r\nimport { ReactComponent  as CSS } from './css.svg'; \r\nimport { ReactComponent  as HTML } from './html.svg';\r\nimport { ReactComponent  as MySQOL } from './mysql.svg'; \r\nimport { ReactComponent  as MongoDB } from './mongodb.svg';\r\nimport { ReactComponent  as Cpp } from './c++.svg';\r\nimport { ReactComponent  as CSharp } from './csharp.svg';\r\nimport { ReactComponent  as Java } from './java.svg'; \r\nimport { ReactComponent  as Javascript } from './javascript.svg';\r\nimport { ReactComponent  as Python } from './python.svg';\r\nimport { ReactComponent  as Typescript } from './typescript.svg';\r\nimport { ReactComponent  as ImageProcessing } from './imageprocessing.svg';\r\nimport { ReactComponent  as Cuda } from './nvidia.svg';\r\nimport { ReactComponent  as GitHub } from './github.svg';\r\nimport { ReactComponent  as Email } from './email.svg';\r\nimport { ReactComponent  as LinkedIn } from './linkedin.svg';\r\n\r\n\r\n\r\n\r\nexport const IconSVG = props => {\r\n\r\n    switch(props.name){\r\n        case \"full stack\":\r\n            return <FullStack x={props.x} y={props.y} width={props.width} height={props.height} />\r\n        case \"back end\":\r\n            return <BackEnd x={props.x} y={props.y} width={props.width} height={props.height}/>\r\n        case \"front end\":\r\n            return <FrontEnd x={props.x} y={props.y} width={props.width} height={props.height}/>\r\n        case \"database\":\r\n            return <Database x={props.x} y={props.y} width={props.width} height={props.height}/>\r\n        case \"iot\":\r\n            return <Iot x={props.x} y={props.y} width={props.width} height={props.height}/>\r\n        case \".net\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <DotNet  x={\"18%\"} y={props.y} width={\"64%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"nodejs\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <NodeJS x={\"11%\"} y={props.y} width={\"78%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"express.js\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <text fill=\"#4d4d4d\" x=\"10%\" y=\"50%\" textLength=\"80%\" fontWeight=\"bold\" >ExpressJS</text>\r\n                </svg>\r\n            )\r\n        case \"mobile\":\r\n            return < Mobile x={props.x} y={props.y} width={props.width} height={props.height}/>\r\n        case \"web\":\r\n            return <Web x={props.x} y={props.y} width={props.width} height={props.height}/>\r\n        case \"react\":\r\n        case \"react native\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <ReactSVG x=\"0\" y=\"0\" width={\"100%\"} height={\"100%\"}/>\r\n                </svg>\r\n            )\r\n        case \"android\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <Android x={\"15%\"} y={props.y} width={\"70%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"ios\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <IoS x={props.x} y={props.y} width={props.width} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"css\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <CSS x={\"5%\"} y={props.y} width={\"90%\"} height={props.height}/>\r\n                </svg>\r\n            )            \r\n        case \"html\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <HTML x={\"10%\"} y={props.y} width={\"80%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"d3.js\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <D3JS x={\"20%\"} y={props.y} width={\"60%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"mysql\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <MySQOL x={props.x} y={props.y} width={\"110%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"mongodb\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <MongoDB x={\"5%\"} y={props.y} width={\"90%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"arduino\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <Arduino x={\"15%\"} y={\"20%\"} width={\"70%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"ti\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <Ti x={\"5%\"} y={props.y} width={\"90%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        // case \"micropython\":\r\n        //     return(\r\n        //         <svg width={props.width} height={props.height}>\r\n        //             <MicroPython x={\"5%\"} y={props.y} width={\"90%\"} height={props.height}/>\r\n        //         </svg>\r\n        //     )\r\n        case \"cpp\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <Cpp x={\"25%\"} y={props.y} width={\"50%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"csharp\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <CSharp x={\"25%\"} y={props.y} width={\"50%\"} height={props.height}/>\r\n                </svg>\r\n            )\r\n        case \"python\":\r\n        return(\r\n            <svg width={props.width} height={props.height}>\r\n                <Python x={\"20%\"} y={props.y} width={\"60%\"} height={props.height}/>\r\n            </svg>\r\n        )\r\n        case \"java\":\r\n        return(\r\n            <svg width={props.width} height={props.height}>\r\n                <Java x={\"30%\"} y={props.y} width={\"40%\"} height={props.height}/>\r\n            </svg>\r\n        )\r\n        case \"javascript\":\r\n        return(\r\n            <svg width={props.width} height={props.height}>\r\n                <Javascript x={\"25%\"} y={props.y} width={\"50%\"} height={props.height}/>\r\n            </svg>\r\n        )\r\n        case \"typescript\":\r\n        return(\r\n            <svg width={props.width} height={props.height}>\r\n                <Typescript x={\"25%\"} y={props.y} width={\"50%\"} height={props.height}/>\r\n            </svg>\r\n        )\r\n        case \"image processing\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <ImageProcessing x={\"25%\"} y={\"5%\"} width={\"50%\"} height={props.height}/>\r\n                </svg>\r\n        )\r\n        case \"cuda\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <Cuda x={\"15%\"} y={\"1%\"} width={\"70%\"} height={props.height}/>\r\n                </svg>\r\n        )\r\n        case \"email\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <Email x={\"0%\"} y={\"0%\"} width={\"100%\"} height={props.height}/>\r\n                </svg>\r\n        )\r\n        case \"github\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <GitHub x={\"0%\"} y={\"0%\"} width={\"100%\"} height={props.height}/>\r\n                </svg>\r\n        )\r\n        case \"linkedin\":\r\n            return(\r\n                <svg width={props.width} height={props.height}>\r\n                    <LinkedIn x={\"0%\"} y={\"0%\"} width={\"100%\"} height={props.height}/>\r\n                </svg>\r\n        )\r\n        default:\r\n            return null;\r\n\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\n","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\education.js",["111","112","113","114"],"\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport './education.css';\r\n\r\nimport education from '../data/education.json';\r\nimport { IconSVG } from '../svgs';\r\n\r\n\r\n\r\n\r\nexport const Education = props => {\r\n\r\n    const timelineRef = useRef(null)\r\n    const schoolRef = useRef(null)\r\n\r\n    const [timelineSize, setTimelineSize] = useState({w:0, h:0})\r\n    const [schoolSize, setSchoolSize] = useState({w:0, h:0})\r\n\r\n    \r\n    useEffect(()=>{\r\n\r\n        if(timelineRef.current){\r\n            const canvas =  timelineRef.current.getBoundingClientRect()\r\n            setTimelineSize({w:canvas.width , h:canvas.height})\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <section className=\"education\" style={styles.education}>\r\n            {education.map((school, index)=>{\r\n                return (\r\n                    <div\r\n                        className=\"school-div\"\r\n                        key={school.id} \r\n                        style={{flexDirection:props.isColumnRatio ? \"row\" : (index % 2===0) ? \"row\" : \"row-reverse\"}}>\r\n                        <div \r\n                            className=\"school-logo-div\"\r\n                            style={{display:props.isColumnRatio ? \"none\" : \"flex\"}}>\r\n\r\n                        </div>\r\n                        <div \r\n                            className=\"school-timeline-div\"\r\n                            ref={timelineRef}>\r\n                            <svg \r\n                                width={timelineSize.w}\r\n                                height={timelineSize.h}\r\n                                viewBox={`0 0 ${timelineSize.w} ${timelineSize.h}`}>\r\n                                    <circle cx=\"50%\" cy=\"50%\" r=\"3%\" fill=\"black\"/>\r\n                                    <line x1=\"50%\" y1=\"0\" x2=\"50%\" y2=\"100%\" stroke=\"black\" strokeWidth=\"2\"/>\r\n                            </svg>\r\n                        </div>\r\n                        <div className=\"school-info-wrapper\">\r\n                            <div className=\"school-info-div\">\r\n                                <h2> {school.name} </h2>\r\n                                <h4> {school.subject}</h4>\r\n                                <span className=\"school-loc-grad\">\r\n                                    <p> {school.location} </p>\r\n                                    <p> {school.graduation} </p> \r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n            })}\r\n        </section>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = {\r\n    education: {\r\n        \r\n    },\r\n  };\r\n  ","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\contact.js",["115","116","117","118"],"\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport './contact.css';\r\n\r\nimport contacts from '../data/contacts.json'\r\nimport { IconSVG } from '../svgs'\r\n\r\n\r\n\r\n\r\n\r\nexport const Contact = props => {\r\n\r\n  \r\n\r\n\r\n    return (\r\n        <section className=\"contacts\">\r\n            {contacts.map((option, index)=>{\r\n                return (\r\n                    <span\r\n                        className=\"contact-option-div\" \r\n                        key={index}\r\n                        onClick={(e) => {\r\n                            window.location.href=`${option.path}`;\r\n                            }}>\r\n                        <div className=\"contact-icon-div\">\r\n                            <IconSVG name={option.name} x=\"0\" y=\"0\" width=\"90%\" height=\"90%\" />          \r\n                        </div>\r\n                        <span className=\"contact-link-div\">\r\n                            <a>{option.link}</a>\r\n                        </span>\r\n                    </span>\r\n                )\r\n            })}\r\n        </section>\r\n    );\r\n};\r\n","D:\\Projects\\Portfolio\\React\\techyoobweb\\src\\pages\\blog.js",["119","120","121"],"\r\n\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport './blog.css';\r\n\r\n\r\n\r\n\r\nexport const Blog = props => {\r\n    return (\r\n        <div className=\"blog\">\r\n\r\n        </div>\r\n    );\r\n};\r\n",{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":2,"column":27,"nodeType":"128","messageId":"129","endLine":2,"endColumn":36},{"ruleId":"130","severity":1,"message":"131","line":181,"column":8,"nodeType":"132","endLine":181,"endColumn":28,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":207,"column":35,"nodeType":"136","messageId":"137","endLine":207,"endColumn":37},{"ruleId":"126","severity":1,"message":"138","line":6,"column":8,"nodeType":"128","messageId":"129","endLine":6,"endColumn":18},{"ruleId":"126","severity":1,"message":"139","line":11,"column":5,"nodeType":"128","messageId":"129","endLine":11,"endColumn":18},{"ruleId":"130","severity":1,"message":"140","line":162,"column":8,"nodeType":"132","endLine":162,"endColumn":10,"suggestions":"141"},{"ruleId":"126","severity":1,"message":"142","line":4,"column":17,"nodeType":"128","messageId":"129","endLine":4,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":4,"column":25,"nodeType":"128","messageId":"129","endLine":4,"endColumn":34},{"ruleId":"126","severity":1,"message":"143","line":37,"column":7,"nodeType":"128","messageId":"129","endLine":37,"endColumn":13},{"ruleId":"126","severity":1,"message":"142","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":1,"column":25,"nodeType":"128","messageId":"129","endLine":1,"endColumn":34},{"ruleId":"126","severity":1,"message":"142","line":3,"column":17,"nodeType":"128","messageId":"129","endLine":3,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":3,"column":25,"nodeType":"128","messageId":"129","endLine":3,"endColumn":34},{"ruleId":"126","severity":1,"message":"144","line":14,"column":5,"nodeType":"128","messageId":"129","endLine":14,"endColumn":15},{"ruleId":"126","severity":1,"message":"143","line":118,"column":7,"nodeType":"128","messageId":"129","endLine":118,"endColumn":13},{"ruleId":"126","severity":1,"message":"142","line":5,"column":27,"nodeType":"128","messageId":"129","endLine":5,"endColumn":33},{"ruleId":"126","severity":1,"message":"145","line":19,"column":8,"nodeType":"128","messageId":"129","endLine":19,"endColumn":14},{"ruleId":"126","severity":1,"message":"146","line":20,"column":8,"nodeType":"128","messageId":"129","endLine":20,"endColumn":13},{"ruleId":"126","severity":1,"message":"147","line":24,"column":8,"nodeType":"128","messageId":"129","endLine":24,"endColumn":16},{"ruleId":"126","severity":1,"message":"148","line":30,"column":5,"nodeType":"128","messageId":"129","endLine":30,"endColumn":12},{"ruleId":"126","severity":1,"message":"144","line":31,"column":5,"nodeType":"128","messageId":"129","endLine":31,"endColumn":15},{"ruleId":"126","severity":1,"message":"149","line":32,"column":5,"nodeType":"128","messageId":"129","endLine":32,"endColumn":13},{"ruleId":"126","severity":1,"message":"150","line":33,"column":5,"nodeType":"128","messageId":"129","endLine":33,"endColumn":11},{"ruleId":"126","severity":1,"message":"151","line":800,"column":10,"nodeType":"128","messageId":"129","endLine":800,"endColumn":24},{"ruleId":"126","severity":1,"message":"142","line":3,"column":17,"nodeType":"128","messageId":"129","endLine":3,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":3,"column":25,"nodeType":"128","messageId":"129","endLine":3,"endColumn":34},{"ruleId":"126","severity":1,"message":"152","line":8,"column":5,"nodeType":"128","messageId":"129","endLine":8,"endColumn":11},{"ruleId":"126","severity":1,"message":"144","line":9,"column":5,"nodeType":"128","messageId":"129","endLine":9,"endColumn":15},{"ruleId":"126","severity":1,"message":"149","line":10,"column":5,"nodeType":"128","messageId":"129","endLine":10,"endColumn":13},{"ruleId":"126","severity":1,"message":"150","line":11,"column":5,"nodeType":"128","messageId":"129","endLine":11,"endColumn":11},{"ruleId":"126","severity":1,"message":"153","line":12,"column":5,"nodeType":"128","messageId":"129","endLine":12,"endColumn":16},{"ruleId":"126","severity":1,"message":"154","line":7,"column":10,"nodeType":"128","messageId":"129","endLine":7,"endColumn":17},{"ruleId":"126","severity":1,"message":"155","line":15,"column":11,"nodeType":"128","messageId":"129","endLine":15,"endColumn":20},{"ruleId":"126","severity":1,"message":"156","line":18,"column":12,"nodeType":"128","messageId":"129","endLine":18,"endColumn":22},{"ruleId":"126","severity":1,"message":"157","line":18,"column":24,"nodeType":"128","messageId":"129","endLine":18,"endColumn":37},{"ruleId":"126","severity":1,"message":"142","line":3,"column":17,"nodeType":"128","messageId":"129","endLine":3,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":3,"column":25,"nodeType":"128","messageId":"129","endLine":3,"endColumn":34},{"ruleId":"126","severity":1,"message":"158","line":3,"column":36,"nodeType":"128","messageId":"129","endLine":3,"endColumn":44},{"ruleId":"159","severity":1,"message":"160","line":32,"column":29,"nodeType":"161","endLine":32,"endColumn":32},{"ruleId":"126","severity":1,"message":"142","line":3,"column":17,"nodeType":"128","messageId":"129","endLine":3,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":3,"column":25,"nodeType":"128","messageId":"129","endLine":3,"endColumn":34},{"ruleId":"126","severity":1,"message":"158","line":3,"column":36,"nodeType":"128","messageId":"129","endLine":3,"endColumn":44},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.name'. Either include it or remove the dependency array.","ArrayExpression",["164"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Background' is defined but never used.","'FaRegEnvelope' is defined but never used.","React Hook useEffect has a missing dependency: 'viewBox'. Either include it or remove the dependency array. You can also do a functional update 'setViewBox(v => ...)' if you only need 'viewBox' in the 'setViewBox' call.",["165"],"'useRef' is defined but never used.","'styles' is assigned a value but never used.","'FaLinkedin' is defined but never used.","'skills' is defined but never used.","'graph' is defined but never used.","'testData' is defined but never used.","'FaReact' is defined but never used.","'FaGithub' is defined but never used.","'FaLink' is defined but never used.","'useDetectRatio' is defined but never used.","'FaCogs' is defined but never used.","'FaRegImages' is defined but never used.","'IconSVG' is defined but never used.","'schoolRef' is assigned a value but never used.","'schoolSize' is assigned a value but never used.","'setSchoolSize' is assigned a value but never used.","'useState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},"Update the dependencies array to be: [props.name, props.selectedItem]",{"range":"170","text":"171"},"Update the dependencies array to be: [viewBox]",{"range":"172","text":"173"},[4561,4581],"[props.name, props.selectedItem]",[4855,4857],"[viewBox]"]